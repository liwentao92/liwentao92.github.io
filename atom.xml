<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero</title>
  <subtitle>毕竟,改变需要时间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-09T13:11:44.976Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android BottomSheet控件用法及使用问题</title>
    <link href="http://yoursite.com/2016/04/09/Android-BottomSheet%E6%8E%A7%E4%BB%B6%E7%94%A8%E6%B3%95%E5%8F%8A%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/09/Android-BottomSheet控件用法及使用问题/</id>
    <published>2016-04-09T09:04:55.000Z</published>
    <updated>2016-04-09T13:11:44.976Z</updated>
    
    <content type="html">&lt;h4 id=&quot;由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android-Support-Library-23-2-，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&quot;&gt;&lt;a href=&quot;#由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android-Support-Library-23-2-，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&quot; class=&quot;headerlink&quot; title=&quot;由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android Support Library 23.2 ，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&quot;&gt;&lt;/a&gt;由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android Support Library 23.2 ，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BottomSheet（&lt;a href=&quot;https://github.com/soarcn/BottomSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/soarcn/BottomSheet&lt;/a&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在官方推出来了，当然是使用原生的好，然而使用过程中还是不如人意啊，用摩托罗拉，魅族手机做测试的时候控件有时弹不出来，弄的也挺麻烦的，原来原生也有坑的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;BottomSheet-的使用：&quot;&gt;&lt;a href=&quot;#BottomSheet-的使用：&quot; class=&quot;headerlink&quot; title=&quot;BottomSheet 的使用：&quot;&gt;&lt;/a&gt;BottomSheet 的使用：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BottomSheet 使用需要CoordinatorLayout作为父布局，BottomSheet 的布局作为CoordinatorLayout 的子布局，并且BottomSheetBehavior（比如加上app:layout_behavior=”android.support.design.widget.BottomSheetBehavior”）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;android.support.design.widget.CoordinatorLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;
xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
android:layout_width=&amp;quot;match_parent&amp;quot;
android:layout_height=&amp;quot;match_parent&amp;quot;
android:fitsSystemWindows=&amp;quot;true&amp;quot;
tools:context=&amp;quot;android.com.bottomsheets.MainActivity&amp;quot;&amp;gt;

&amp;lt;android.support.design.widget.AppBarLayout
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;wrap_content&amp;quot;
    android:theme=&amp;quot;@style/AppTheme.AppBarOverlay&amp;quot;&amp;gt;

    &amp;lt;android.support.v7.widget.Toolbar
        android:id=&amp;quot;@+id/toolbar&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;?attr/actionBarSize&amp;quot;
        android:background=&amp;quot;?attr/colorPrimary&amp;quot;
        app:popupTheme=&amp;quot;@style/AppTheme.PopupOverlay&amp;quot; /&amp;gt;

&amp;lt;/android.support.design.widget.AppBarLayout&amp;gt;

&amp;lt;include layout=&amp;quot;@layout/content_main&amp;quot; /&amp;gt;

&amp;lt;include layout=&amp;quot;@layout/bottom_sheet_main&amp;quot; /&amp;gt;

&amp;lt;/android.support.design.widget.CoordinatorLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际使用过程中主要依靠BottomSheetBehavior来控制BottomSheet的展示及回调。&lt;br&gt;BottomSheetBehavior 具有五种状态：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;STATE_COLLAPSED&lt;/strong&gt; ：默认的折叠状态， bottom sheets只在底部显示一部分布局。显示高度可以通过 app:behavior_peekHeight 设置（默认是0）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STATE_DRAGGING&lt;/strong&gt;：过渡状态，此时用户正在向上或者向下拖动bottom sheet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STATE_SETTLING &lt;/strong&gt;:  视图从脱离手指自由滑动到最终停下的这一小段时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STATE_EXPANDED &lt;/strong&gt;： bottom sheet 处于完全展开的状态：当bottom sheet的高度低于CoordinatorLayout容器时，整个bottom sheet都可见；或者CoordinatorLayout容器已经被bottom sheet填满。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STATE_HIDDEN  &lt;/strong&gt;： 默认无此状态（可通过app:behavior_hideable 启用此状态），启用后用户将能通过向下滑动完全隐藏 bottom sheet&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 设置状态：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;强调：&quot;&gt;&lt;a href=&quot;#强调：&quot; class=&quot;headerlink&quot; title=&quot;强调：&quot;&gt;&lt;/a&gt;强调：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BottomSheet 点击展示的默认是折叠状态，不是完全展开状况，所有如果需要完全展开，请设置展开状况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;BottomSheetDialog&quot;&gt;&lt;a href=&quot;#BottomSheetDialog&quot; class=&quot;headerlink&quot; title=&quot;BottomSheetDialog&quot;&gt;&lt;/a&gt;BottomSheetDialog&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BottomSheetBehavior将能帮你实现 常驻bottom sheet（ persistent bottom sheet）的场景, 但这个版本还提供了BottomSheetDialog 和 BottomSheetDialogFragment 来实现 modal bottom sheets的场景。只需要将AppCompatDialog 或者AppCompatDialogFragment分别替换成上述的两个控件，你就拥有了 bottom sheet 风格的对话框。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用问题1：&quot;&gt;&lt;a href=&quot;#使用问题1：&quot; class=&quot;headerlink&quot; title=&quot;使用问题1：&quot;&gt;&lt;/a&gt;使用问题1：&lt;/h4&gt;&lt;p&gt;然而我们实际我们需要BottomSheetDialog 是展开的，而BottomSheetDialog只展示一部分&lt;br&gt;原因：BottomSheetDialog默认是STATE_COLLAPSED，所有BottomSheetDialog 依靠peekHight来设置高度，系统BottomSheetDialog 默认高度为256dp（查源码得知）,那按理来说我们的BottomSheetDialog 高度该是256dp，但是我们实际发现BottomSheetDialog高度也不等于256dp。我们研究下BottomSheetBehavior的中控制BottomSheetDialog高度源码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public boolean onLayoutChild(CoordinatorLayout parent, V child, int layoutDirection) {
    // First let the parent lay it out
    if (mState != STATE_DRAGGING &amp;amp;&amp;amp; mState != STATE_SETTLING) {
        parent.onLayoutChild(child, layoutDirection);
    }
    // Offset the bottom sheet
    mParentHeight = parent.getHeight();
    mMinOffset = Math.max(0, mParentHeight - child.getHeight());
    mMaxOffset = mParentHeight - mPeekHeight;
    if (mState == STATE_EXPANDED) {
        ViewCompat.offsetTopAndBottom(child, mMinOffset);
    } else if (mHideable &amp;amp;&amp;amp; mState == STATE_HIDDEN) {
        ViewCompat.offsetTopAndBottom(child, mParentHeight);
    } else if (mState == STATE_COLLAPSED) {
        ViewCompat.offsetTopAndBottom(child, mMaxOffset);
    }
    if (mViewDragHelper == null) {
        mViewDragHelper = ViewDragHelper.create(parent, mDragCallback);
    }
    mViewRef = new WeakReference&amp;lt;&amp;gt;(child);
    mNestedScrollingChildRef = new WeakReference&amp;lt;&amp;gt;(findScrollingChild(child));
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过源码我们可以得知BottomSheetBehavior通过改变child的偏移量而控制BottomSheetDialog的高度，默认状态为STATE_COLLAPSED,child向下移动mMaxOffset高度，从而控制child显示高度为mPeekHeight,这就需要child与parent 顶部对齐，child的getTop 为0；&lt;/p&gt;
&lt;p&gt;然而我们再去查看Android的BottomSheetDialog 内中布局R.layout.design_bottom_sheet_dialog,发现我们自定义的的BottomSheetDialog 的contentView 是放置在FrameLayout 中的，然而FrameLayout出于某些原因为垂直居中的，而不是顶部对齐，从而导致BottomSheetDialog在256dp的基础上向下偏移,只展示一部分。&lt;br&gt;所以我们可以通过下面方法解决BottomSheetDialog 的显示问题&lt;/p&gt;
&lt;p&gt;解决方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 1 . 通过bottomSheetDialog中contentView得到parentView，通过parentView 得到BottomSheetBehavior&lt;br&gt; 2 .  测量bottomSheetDialog布局中content的高度，设置peekHight&lt;br&gt; 3 . 设置bottomSheetDialog 的contentView 对应的父布局CoordinatorLayout的Grivity 为Gravity.TOP | Gravity.CENTER_HORIZONTAL;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;final BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(this);
 View contentView = View.inflate(this, R.layout.bottom_sheet_avatar, null);

 View.OnClickListener clickListener = new View.OnClickListener() {
     @Override
     public void onClick(View v) {
         switch (v.getId()) {
             case R.id.avatar_open_photo:
                 openCamera();
                 break;
             case R.id.avatar_open_picture:
                 openPicture();
                 break;
         }
         if (bottomSheetDialog != null &amp;amp;&amp;amp; bottomSheetDialog.isShowing()) {
             bottomSheetDialog.dismiss();
         }
     }
 };

 contentView.findViewById(R.id.avatar_open_photo).setOnClickListener(clickListener);
 contentView.findViewById(R.id.avatar_open_picture).setOnClickListener(clickListener);
 contentView.findViewById(R.id.avatar_cancel).setOnClickListener(clickListener);

 bottomSheetDialog.setContentView(contentView);
 View parent = (View) contentView.getParent();
 BottomSheetBehavior behavior = BottomSheetBehavior.from(parent);
 contentView.measure(0, 0);
 behavior.setPeekHeight(contentView.getMeasuredHeight());
 CoordinatorLayout.LayoutParams params = (CoordinatorLayout.LayoutParams) parent.getLayoutParams();
 params.gravity = Gravity.TOP | Gravity.CENTER_HORIZONTAL;
 parent.setLayoutParams(params);
 bottomSheetDialog.show();
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用问题2：&quot;&gt;&lt;a href=&quot;#使用问题2：&quot; class=&quot;headerlink&quot; title=&quot;使用问题2：&quot;&gt;&lt;/a&gt;使用问题2：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当我们设置bottomSheetDialog每次点击后不new,而是直接show的话，然而当我们会bottomSheetDialog 展开后，我们将BottomSheetDialog划下隐藏后， 再点击展示BottomSheetDialog后，会发现页面只是变暗，BottomsheetDialog未展开，这是由于之前我们划下收缩隐藏BottomSheetDialog后，bottomSheetDialogBehavior的状态为隐藏，再次show之后，系统未恢复bottomSheetDialogBehavior的状态，还是隐藏，所以再次点击后页面只是变暗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
   public void onClick(View v) {
       switch (v.getId()) {
           case R.id.showBottomSheetDialogButton:
               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bottomSheetDialog != null) {
                   bottomSheetDialog.show();
                   Log.i(&lt;span class=&quot;string&quot;&gt;&quot;0000&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;behavior_state:&quot;&lt;/span&gt; + bottomSheetDialogBehavior.getState());
                   Log.i(&lt;span class=&quot;string&quot;&gt;&quot;0000&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;STATE_HIDDEN :&quot;&lt;/span&gt; + BottomSheetBehavior.STATE_HIDDEN);
                   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
               }

               bottomSheetDialog = new BottomSheetDialog(this);
               bottomSheetDialog.show();
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;唉，没想到官方出的也会有这么2个问题，不过通过以上的方法也解决了这2个问题。&lt;/p&gt;
&lt;p&gt;感谢原作者的分享：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文／sunshine2050（简书作者）&lt;br&gt;原文链接：&lt;a href=&quot;http://www.jianshu.com/p/38af0cf77352&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/38af0cf77352&lt;/a&gt;&lt;br&gt;著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android-Support-Library-23-2-，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&quot;&gt;&lt;a href=&quot;#由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android-Support-Library-23-2-，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&quot; class=&quot;headerlink&quot; title=&quot;由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android Support Library 23.2 ，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&quot;&gt;&lt;/a&gt;由于项目需求需要，要使用底部弹出菜单的效果，正好看到了谷歌推出了Android Support Library 23.2 ，在更新的功能中就有BottomSheet这个控件，来实现底部弹出菜单的效果。而以前也有人写过这种效果。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BottomSheet（&lt;a href=&quot;https://github.com/soarcn/BottomSheet&quot;&gt;https://github.com/soarcn/BottomSheet&lt;/a&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在官方推出来了，当然是使用原生的好，然而使用过程中还是不如人意啊，用摩托罗拉，魅族手机做测试的时候控件有时弹不出来，弄的也挺麻烦的，原来原生也有坑的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android studio 代码混淆如何忽略第三方jar包</title>
    <link href="http://yoursite.com/2016/04/09/android-studio-%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%A6%82%E4%BD%95%E5%BF%BD%E7%95%A5%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85/"/>
    <id>http://yoursite.com/2016/04/09/android-studio-代码混淆如何忽略第三方jar包/</id>
    <published>2016-04-09T06:27:47.000Z</published>
    <updated>2016-04-09T08:48:26.870Z</updated>
    
    <content type="html">&lt;p&gt; 最近在打包混淆时，遇到一个问题，混淆编译都不出错，运行出错，一般遇到这种问题，肯定是在运行的地方有代码被混淆了，经过错误排查，发现是程序中用到第三方的jar包的方法出现问题了，原来android studio混淆打包时把第三方的jar包给混淆了。&lt;/p&gt;
&lt;p&gt;于是想这个问题很简单，保持jar包不混淆就好，于是直接在app目录下的proguard-rules.pro(或者proguard-rules.txt)混淆规则文件直接-libraryjars libs/xx.jar避免混淆。但是却引出了另一个错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error:Execution failed for task ‘:app:proguardRelease’.&lt;br&gt;java.io.IOException: The same input jar [E:\myproject\app\libs\XX.jar] is specified twice.&lt;br&gt;也就是说混淆规则文件中，我们指定了2次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打开app目录下的libs文件夹，将各第三方jar下的包名在proguard-rules.pro 文件中过滤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsses.com2.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160409160009.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;code：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-keep class audio.cutter.lib.&lt;strong&gt;{*;}&lt;br&gt;-keep class universal.initlibs.&lt;/strong&gt;{*;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的代码以-keep class audio.cutter.lib.&lt;em&gt;*{&lt;/em&gt;;} 为例，意思是不混淆com.baidu包下的各个类及类里面的所以域和方法。把上面的包名换成自己想要忽略的jar下面暴露的包名即可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; 最近在打包混淆时，遇到一个问题，混淆编译都不出错，运行出错，一般遇到这种问题，肯定是在运行的地方有代码被混淆了，经过错误排查，发现是程序中用到第三方的jar包的方法出现问题了，原来android studio混淆打包时把第三方的jar包给混淆了。&lt;/p&gt;
&lt;p&gt;于是想这个
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio中的Button英文文本显示为大写的解决方法</title>
    <link href="http://yoursite.com/2016/04/02/Android-Studio%E4%B8%AD%E7%9A%84Button%E8%8B%B1%E6%96%87%E6%96%87%E6%9C%AC%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%A4%A7%E5%86%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/04/02/Android-Studio中的Button英文文本显示为大写的解决方法/</id>
    <published>2016-04-02T04:50:51.000Z</published>
    <updated>2016-04-02T04:56:56.053Z</updated>
    
    <content type="html">&lt;h4 id=&quot;最近在做项目中发现Button的文本中，英文字母全部显示为大写，不管text中写的是大写还是小写-对于这个问题确实有点疑问，google了一下，也解决了。&quot;&gt;&lt;a href=&quot;#最近在做项目中发现Button的文本中，英文字母全部显示为大写，不管text中写的是大写还是小写-对于这个问题确实有点疑问，google了一下，也解决了。&quot; class=&quot;headerlink&quot; title=&quot;最近在做项目中发现Button的文本中，英文字母全部显示为大写，不管text中写的是大写还是小写,对于这个问题确实有点疑问，google了一下，也解决了。&quot;&gt;&lt;/a&gt;最近在做项目中发现Button的文本中，英文字母全部显示为大写，不管text中写的是大写还是小写,对于这个问题确实有点疑问，google了一下，也解决了。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;解决办法很简单，在Button的属性里加上android:textAllCaps=”false”就行了&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近在做项目中发现Button的文本中，英文字母全部显示为大写，不管text中写的是大写还是小写-对于这个问题确实有点疑问，google了一下，也解决了。&quot;&gt;&lt;a href=&quot;#最近在做项目中发现Button的文本中，英文字母全部显示为大写，不管text中写的是大
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android apk瘦身</title>
    <link href="http://yoursite.com/2016/04/01/Android-apk%E7%98%A6%E8%BA%AB/"/>
    <id>http://yoursite.com/2016/04/01/Android-apk瘦身/</id>
    <published>2016-04-01T15:00:56.000Z</published>
    <updated>2016-04-02T04:38:10.484Z</updated>
    
    <content type="html">&lt;h4 id=&quot;最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&quot;&gt;&lt;a href=&quot;#最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&quot; class=&quot;headerlink&quot; title=&quot;最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&quot;&gt;&lt;/a&gt;最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&lt;/h4&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;技术列表&quot;&gt;&lt;a href=&quot;#技术列表&quot; class=&quot;headerlink&quot; title=&quot;技术列表&quot;&gt;&lt;/a&gt;技术列表&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lint检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tiny图片处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proguard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;微信资源压缩&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;lint检查清除冗余&quot;&gt;&lt;a href=&quot;#lint检查清除冗余&quot; class=&quot;headerlink&quot; title=&quot;lint检查清除冗余&quot;&gt;&lt;/a&gt;lint检查清除冗余&lt;/h4&gt;&lt;p&gt;实践方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Studio&lt;br&gt;Analyze -&amp;gt; Run Inspection by Name&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在对话框中分别输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unusedResources
unused declaration
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以发现多余的冗余文件如多余的图片，多余的代码等等，将这些多余的删除可以减少一点apk的体积。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;tiny图片处理：&quot;&gt;&lt;a href=&quot;#tiny图片处理：&quot; class=&quot;headerlink&quot; title=&quot;tiny图片处理：&quot;&gt;&lt;/a&gt;tiny图片处理：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tinypng.com/&lt;/a&gt;&lt;br&gt;目前所知图片压缩效果最好的网站。压缩后的图片体积会减少好多非常不错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在日常的开发中，如果去此网站挨个处理图片其实也是有困扰的。其实我们可以利用tiny提供的jar包做了个批量处理本地图片的tinyPIC gradle plugin。然后在build 中插入一个新的tinyPicPlugin task.遍历寻找项目res中以drawable开头的文件夹中的图片资源，调用tiny API进行压缩工作并替换原来的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; tinyPIC插件适用于各个Android项目，下面的链接是一个开源了的tiny 插件,接入方法请参考：&lt;br&gt;&lt;a href=&quot;https://github.com/mogujie/TinyPIC_Gradle_Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mogujie/TinyPIC_Gradle_Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Proguard&quot;&gt;&lt;a href=&quot;#Proguard&quot; class=&quot;headerlink&quot; title=&quot;Proguard&quot;&gt;&lt;/a&gt;Proguard&lt;/h4&gt;&lt;p&gt;Proguard是编译时对java代码进行压缩，混淆，优化，预编译等操作的集成化工具。达到删除冗余，增加安全防护，减小大小的功效。在Android studio中的app的gradle可以以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; buildTypes {
    release {
        // 不显示Log
        buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;LOG_DEBUG&amp;quot;, &amp;quot;false&amp;quot;
        //混淆
        minifyEnabled true
        //Zipalign优化
        zipAlignEnabled true
        //去除无效资源
        shrinkResources true
        //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
        proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开启混淆后有可能会报错，因此还要保持一些代码不能被混淆&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt; #指定代码的压缩级别
-optimizationpasses 5

#包明不混合大小写
-dontusemixedcaseclassnames

#不去忽略非公共的库类
-dontskipnonpubliclibraryclasses

 #优化  不优化输入的类文件
-dontoptimize

 #预校验
-dontpreverify

 #混淆时是否记录日志
-verbose

 # 混淆时所采用的算法
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*

#保护注解
-keepattributes *Annotation*



# 保持哪些类不被混淆
-keep public class * extends android.app.Fragment
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.preference.Preference
-keep public class com.android.vending.licensing.ILicensingService
#如果有引用v4包可以添加下面这行
-keep public class * extends android.support.v4.app.Fragment


#####################记录生成的日志数据,gradle build时在本项目根目录输出################

#apk 包内所有 class 的内部结构
-dump class_files.txt
#未混淆的类和成员
-printseeds seeds.txt
#列出从 apk 中删除的代码
-printusage unused.txt
#混淆前后的映射
-printmapping mapping.txt
################混淆保护自己项目的部分代码以及引用的第三方jar包library#########################
##-keep class com.zhy.autolayout.** { *; }
-keep class com.mifly.audio.base.BaseActivity{*;}

############混淆保护自己项目的部分代码以及引用的第三方jar包library-end##################

-keep public class * extends android.view.View {
    public &amp;lt;init&amp;gt;(android.content.Context);
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}

#保持 native 方法不被混淆
-keepclasseswithmembernames class * {
    native &amp;lt;methods&amp;gt;;
}

#保持自定义控件类不被混淆
-keepclasseswithmembers class * {
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);
}

#保持自定义控件类不被混淆
-keepclasseswithmembers class * {
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet, int);
}
#保持自定义控件类不被混淆
-keepclassmembers class * extends android.app.Activity {
   public void *(android.view.View);
}

#保持 Parcelable 不被混淆
-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}

#保持 Serializable 不被混淆
-keepnames class * implements java.io.Serializable

#保持 Serializable 不被混淆并且enum 类也不被混淆
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    !static !transient &amp;lt;fields&amp;gt;;
    !private &amp;lt;fields&amp;gt;;
    !private &amp;lt;methods&amp;gt;;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

#不混淆资源类
-keepclassmembers class **.R$* {
    public static &amp;lt;fields&amp;gt;;
}
-keep class **.R$*
-keep class org.apache.http.**
-keep class android.support.v7.widget.**{*;}
-keep class android.support.design.**{*;}
-keep public class android.support.v7.widget.LinearLayoutManager

-keep public class * extends android.support.v7.widget.CardView$LayoutManager {
    public &amp;lt;init&amp;gt;(...);
}

# support-v4
-dontwarn android.support.v4.**
-keep class android.support.v4.app.** { *; }
-keep interface android.support.v4.app.** { *; }
# support-v7
-dontwarn android.support.v7.**
-keep class android.support.v7.internal.** { *; }
-keep interface android.support.v7.internal.** { *; }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;自己的项目那个类报错就保持那个类不混淆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;微信资源压缩&quot;&gt;&lt;a href=&quot;#微信资源压缩&quot; class=&quot;headerlink&quot; title=&quot;微信资源压缩&quot;&gt;&lt;/a&gt;微信资源压缩&lt;/h4&gt;&lt;p&gt;apk代码运行时，是通过 code -&amp;gt;R -&amp;gt;res找到对应资源的。&lt;br&gt;而R -&amp;gt;res的映射关系是打包时写在resources.arsc里的。&lt;br&gt;所以对生成的apk进行的操作如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.先解压缩包&lt;/p&gt;
&lt;p&gt;2.然后对res目录下的文件夹和文件进行名称替换&lt;/p&gt;
&lt;p&gt;3.同时修改resources.arsc里对应的R与资源的映射关系&lt;/p&gt;
&lt;p&gt;4.然后再打包签名生成新的apk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信资源压缩工具与业务代码无关，我们已经把这部分技术处理整合到打包系统里，推荐大家在发布你们的apk时加入微信资源压缩，效果杠杠的。&lt;/p&gt;
&lt;p&gt;微信Android资源混淆打包工具原理：&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;amp;mid=208135658&amp;amp;idx=1&amp;amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;amp;mid=208135658&amp;amp;idx=1&amp;amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github地址：&lt;br&gt;&lt;a href=&quot;https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;github中已经告诉微信资源压缩的使用方法，感觉在Android stduio中使用最简单了，如果看不懂如何使用可以在它提供的源码中的例子有配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用以上方法还是很不错的，apk的体积确实小了很多。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a href=&quot;http://blog.csdn.net/UsherFor/article/details/46827587&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/UsherFor/article/details/46827587&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&quot;&gt;&lt;a href=&quot;#最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&quot; class=&quot;headerlink&quot; title=&quot;最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&quot;&gt;&lt;/a&gt;最近做完项目打包成apk后感觉项目有点大，于是在网上找了一些APK的瘦身方法，使用这些方法后APK果然减小了，现在对这些方法经验进行总结：&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发心得整理</title>
    <link href="http://yoursite.com/2016/03/27/Android%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/27/Android开发心得整理/</id>
    <published>2016-03-27T03:30:14.000Z</published>
    <updated>2016-03-29T12:46:59.887Z</updated>
    
    <content type="html">&lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/@laanayabdrzak/android-development-some-of-the-best-practices-27722c685b6a#.x3b8wsvz9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/@laanayabdrzak/android-development-some-of-the-best-practices-27722c685b6a#.x3b8wsvz9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在开发了几个项目之后我决定写篇文章分享一下一路走来的经验教训。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在使用任何第三方库之前都要三思，这件事非常严肃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除非必须，不要使用数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你可以尝试使用realm（第三方数据库），这个真的不错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目很快就会达到65k方法，真的很快。此时可以求助Multidex。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RxJava是AsyncTask的最佳替代，而且它远不止于此。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Retrofit是最好用的网络库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要自己写Http客户端，可以用Volley或OkHttp。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用RetroLambda缩减代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我能想到人生最cool的事，就是把RxJava、Retrofit和RetroLambda绑在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EventBus挺好用，但我不会用太多，因为代码会变得很纠结。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过功能分包，而不是通过层。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要在UI线程中执行逻辑代码，不然可能会ANR。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Lint检查Layout层级可以帮你发现没用的View，兴许可以去掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Gradle以及默认项目结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把密码与敏感数据放在gradle.properties里。（译者注：或许更好的方式是把这些数据放在local.properties里，然后把这个文件加进.gitignore）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用styles来避免在Layout文件中写重复代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要让ViewGroup层级太多。（会过度绘制）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监控电量，充电时可以进行更多的数据更新，低电量时停止数据的自动更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以尝试JobScheduler。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当系统缺少内存（而不是应用缺少内存）时，系统会调用onLowMemory()方法，所以OOM原则上无法避免。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Account Manager来提示登录所需的信息（用户名、邮箱、密码等）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给方法一个明确的命名，要能顾名思义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动界面是应用带给用户的第一体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果不需要启动界面，那不要无故添加。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保持colors.xml文件短而简单，只写基本颜色就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保持dimens.xml文件简单，之定义基本常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当要时常修改一个字符串时，使用StringBuffer或StringBuilder(后者不保证线程安全)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了避免内存泄露：不要在AsyncCallBack中保留View引用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要让静态对象持有View引用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最好不要在集合框架中存储View，但你也可以使用WeakHashMap。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FlatBuffers是一个高效的跨平台的序列化类库，建议使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Serializable实现起来很方便，但性能是真的差。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/@laanayabdrzak/android-development-some-of-the-best-practices-27722c685b6a#.x3b8wsvz9&quot;&gt;https://medium.com/@laanayabdrzak/android-development-some-of-the-best-practices-27722c685b6a#.x3b8wsvz9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在开发了几个项目之后我决定写篇文章分享一下一路走来的经验教训。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android修改EditText下划线线颜色</title>
    <link href="http://yoursite.com/2016/03/23/Android%E4%BF%AE%E6%94%B9EditText%E4%B8%8B%E5%88%92%E7%BA%BF%E7%BA%BF%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2016/03/23/Android修改EditText下划线线颜色/</id>
    <published>2016-03-23T14:26:36.000Z</published>
    <updated>2016-03-23T14:59:19.600Z</updated>
    
    <content type="html">&lt;h2 id=&quot;利用xml-画线&quot;&gt;&lt;a href=&quot;#利用xml-画线&quot; class=&quot;headerlink&quot; title=&quot;利用xml 画线&quot;&gt;&lt;/a&gt;利用xml 画线&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;首先，将edittext-去除边框&quot;&gt;&lt;a href=&quot;#首先，将edittext-去除边框&quot; class=&quot;headerlink&quot; title=&quot;首先，将edittext 去除边框&quot;&gt;&lt;/a&gt;首先，将edittext 去除边框&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;android:background=”@null”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个代码可以去掉 edittext 的边框&lt;/p&gt;
&lt;h4 id=&quot;然后，edittext-底部加线&quot;&gt;&lt;a href=&quot;#然后，edittext-底部加线&quot; class=&quot;headerlink&quot; title=&quot;然后，edittext 底部加线&quot;&gt;&lt;/a&gt;然后，edittext 底部加线&lt;/h4&gt;&lt;p&gt;在drawable 新建一个 line.xml&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; android:shape=&quot;rectangle&quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;solid android:color=&quot;@color/orange_normal&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  android:height=&quot;1dp&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  android:width=&quot;1000dp&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/shape&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;最后，在layout-的布局文件中引用&quot;&gt;&lt;a href=&quot;#最后，在layout-的布局文件中引用&quot; class=&quot;headerlink&quot; title=&quot;最后，在layout 的布局文件中引用&quot;&gt;&lt;/a&gt;最后，在layout 的布局文件中引用&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&amp;lt;EditText
 android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/phone&quot;&lt;/span&gt;
 android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
 android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
 android:background=&lt;span class=&quot;string&quot;&gt;&quot;@null&quot;&lt;/span&gt;
 android:drawableBottom=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/line&quot;&lt;/span&gt;
 android:hint=&lt;span class=&quot;string&quot;&gt;&quot;@string/phone_hint&quot;&lt;/span&gt;
 android:inputType=&lt;span class=&quot;string&quot;&gt;&quot;phone&quot;&lt;/span&gt;
 android:maxLength=&lt;span class=&quot;string&quot;&gt;&quot;11&quot;&lt;/span&gt;
 android:maxLines=&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用xml-画线&quot;&gt;&lt;a href=&quot;#利用xml-画线&quot; class=&quot;headerlink&quot; title=&quot;利用xml 画线&quot;&gt;&lt;/a&gt;利用xml 画线&lt;/h2&gt;
    
    </summary>
    
    
      <category term="EditText" scheme="http://yoursite.com/tags/EditText/"/>
    
  </entry>
  
  <entry>
    <title>RX Android学习</title>
    <link href="http://yoursite.com/2016/03/21/RX-Android%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/03/21/RX-Android学习/</id>
    <published>2016-03-21T14:07:03.000Z</published>
    <updated>2016-03-23T14:57:32.305Z</updated>
    
    <content type="html">&lt;p&gt;首先需要明确一个观点：Rx并不是一种新的语言，而是一种普通的Java模式，类似于观察者模式（Observer Pattern），可以将它看作一个普通的Java类库，因此你可以立即使用RxJava。而RxAndroid是RxJava的一个针对Android平台的扩展，主要用于 Android 开发。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;RxJava是个什么库：&quot;&gt;&lt;a href=&quot;#RxJava是个什么库：&quot; class=&quot;headerlink&quot; title=&quot;RxJava是个什么库：&quot;&gt;&lt;/a&gt;RxJava是个什么库：&lt;/h2&gt;&lt;p&gt;通俗的说是一个实现异步操作的库。&lt;/p&gt;
&lt;h2 id=&quot;AsyncTask的缺点：&quot;&gt;&lt;a href=&quot;#AsyncTask的缺点：&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask的缺点：&quot;&gt;&lt;/a&gt;AsyncTask的缺点：&lt;/h2&gt;&lt;p&gt;对于android开发者来说异步并不陌生，因为android为我们提供了 AsyncTask 和Handler这两个类来处理异步操作。不过目前的异步编程方式都会导致一些问题。&lt;/p&gt;
&lt;p&gt;1、生命周期&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;很多开发者会认为一个在Activity中创建的AsyncTask会随着Activity的销毁而销毁。然而事实并非如此。AsyncTask会一直执行, 直到doInBackground()方法执行完毕。然后，如果 cancel(boolean)被调用, 那么onCancelled(Result result) 方法会被执行；否则，执行onPostExecute(Result result) 方法。如果我们的Activity销毁之前，没有取消 AsyncTask，这有可能让我们的AsyncTask崩溃(crash)。因为它想要处理的view已经不存在了。所以，我们总是必须确保在销毁活动之前取消任务。总之，我们使用AsyncTask需要确保AsyncTask正确地取消。

另外，即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、内存泄漏&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果AsyncTask被声明为Activity的非静态的内部类，那么AsyncTask会保留一个对创建了AsyncTask的Activity的引用。如果Activity已经被销毁，AsyncTask的后台线程还在执行，它将继续在内存里保留这个引用，导致Activity无法被回收，引起内存泄露。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、结果丢失&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;屏幕旋转或Activity在后台被系统杀掉等情况会导致Activity的重新创建，之前运行的AsyncTask会持有一个之前Activity的引用，这个引用已经无效，这时调用onPostExecute()再去更新界面将不再生效。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、并行还是串行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在Android 1.6之前的版本，AsyncTask是串行的，在1.6至2.3的版本，改成了并行的。在2.3之后的版本又做了修改，可以支持并行和串行，当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Thread的缺点：&quot;&gt;&lt;a href=&quot;#Thread的缺点：&quot; class=&quot;headerlink&quot; title=&quot;Thread的缺点：&quot;&gt;&lt;/a&gt;Thread的缺点：&lt;/h2&gt;&lt;p&gt;在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）&lt;/p&gt;
&lt;h2 id=&quot;RxJava的优点：&quot;&gt;&lt;a href=&quot;#RxJava的优点：&quot; class=&quot;headerlink&quot; title=&quot;RxJava的优点：&quot;&gt;&lt;/a&gt;RxJava的优点：&lt;/h2&gt;&lt;p&gt;RxJava的编写采用的是一种使用响应式编程，它可以更好的处理内存泄露问题, 代码可读性强，代码更简洁, 选择执行线程和监听线程也更加方便. 在destroy时, 还可以关闭正在执行的异步任务。&lt;/p&gt;
&lt;h2 id=&quot;RxJava在Android-studio中如何调用：&quot;&gt;&lt;a href=&quot;#RxJava在Android-studio中如何调用：&quot; class=&quot;headerlink&quot; title=&quot;RxJava在Android studio中如何调用：&quot;&gt;&lt;/a&gt;RxJava在Android studio中如何调用：&lt;/h2&gt;&lt;p&gt;配置&lt;br&gt;新建一个Test程序. 配置build.gradle, 添加RxAndroid库和Lamada表达式支持, 还有ButterKnife.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugins {
    id &amp;quot;me.tatarka.retrolambda&amp;quot; version &amp;quot;3.2.2&amp;quot;
}
apply plugin: &amp;apos;com.android.application&amp;apos;
android {
    compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
                   }
        }

dependencies {

compile &amp;apos;com.jakewharton:butterknife:7.0.1&amp;apos;
compile &amp;apos;io.reactivex:rxandroid:1.1.2&amp;apos;
compile &amp;apos;io.reactivex:rxjava:1.1.2&amp;apos;
             }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lambda表达式支持不是必须的, 可以让你代码更加简洁, 减少匿名类的出现.（Lambda表达式貌似要写在apply plugin: ‘com.android.application’上面，不然又可能有错误）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附录&lt;br&gt;&lt;a href=&quot;https://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.wangchenlong.org/2016/03/19/1602/rxandroid-async/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 RxAndroid 处理异步任务&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/goodlixueyong/article/details/45895997&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AsyncTask的缺陷和问题&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先需要明确一个观点：Rx并不是一种新的语言，而是一种普通的Java模式，类似于观察者模式（Observer Pattern），可以将它看作一个普通的Java类库，因此你可以立即使用RxJava。而RxAndroid是RxJava的一个针对Android平台的扩展，主要用于 Android 开发。&lt;br&gt;
    
    </summary>
    
    
      <category term="rxjava" scheme="http://yoursite.com/tags/rxjava/"/>
    
      <category term="rxandroid" scheme="http://yoursite.com/tags/rxandroid/"/>
    
  </entry>
  
  <entry>
    <title>Android学习网站</title>
    <link href="http://yoursite.com/2016/03/13/Android%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2016/03/13/Android学习网站/</id>
    <published>2016-03-13T07:53:51.000Z</published>
    <updated>2016-04-02T04:59:48.539Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Android学习网址：&quot;&gt;&lt;a href=&quot;#Android学习网址：&quot; class=&quot;headerlink&quot; title=&quot;Android学习网址：&quot;&gt;&lt;/a&gt;Android学习网址：&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;泡在网上的日子：http-www-jcodecraeer-com&quot;&gt;&lt;a href=&quot;#泡在网上的日子：http-www-jcodecraeer-com&quot; class=&quot;headerlink&quot; title=&quot;泡在网上的日子：http://www.jcodecraeer.com/&quot;&gt;&lt;/a&gt;泡在网上的日子：&lt;a href=&quot;http://www.jcodecraeer.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jcodecraeer.com/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;稀土掘金：http-gold-xitu-io&quot;&gt;&lt;a href=&quot;#稀土掘金：http-gold-xitu-io&quot; class=&quot;headerlink&quot; title=&quot;稀土掘金：http://gold.xitu.io/&quot;&gt;&lt;/a&gt;稀土掘金：&lt;a href=&quot;http://gold.xitu.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gold.xitu.io/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;codekk开源项目解析-http-p-codekk-com&quot;&gt;&lt;a href=&quot;#codekk开源项目解析-http-p-codekk-com&quot; class=&quot;headerlink&quot; title=&quot;codekk开源项目解析: http://p.codekk.com/&quot;&gt;&lt;/a&gt;codekk开源项目解析: &lt;a href=&quot;http://p.codekk.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://p.codekk.com/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;Trinea-http-www-trinea-cn&quot;&gt;&lt;a href=&quot;#Trinea-http-www-trinea-cn&quot; class=&quot;headerlink&quot; title=&quot;Trinea: http://www.trinea.cn/&quot;&gt;&lt;/a&gt;Trinea: &lt;a href=&quot;http://www.trinea.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.trinea.cn/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;代码家-http-blog-daimajia-com&quot;&gt;&lt;a href=&quot;#代码家-http-blog-daimajia-com&quot; class=&quot;headerlink&quot; title=&quot;代码家: http://blog.daimajia.com/&quot;&gt;&lt;/a&gt;代码家: &lt;a href=&quot;http://blog.daimajia.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.daimajia.com/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;stormzhang-http-stormzhang-com&quot;&gt;&lt;a href=&quot;#stormzhang-http-stormzhang-com&quot; class=&quot;headerlink&quot; title=&quot;stormzhang: http://stormzhang.com/&quot;&gt;&lt;/a&gt;stormzhang: &lt;a href=&quot;http://stormzhang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stormzhang.com/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;夏安明-http-blog-csdn-net-xiaanming&quot;&gt;&lt;a href=&quot;#夏安明-http-blog-csdn-net-xiaanming&quot; class=&quot;headerlink&quot; title=&quot;夏安明: http://blog.csdn.net/xiaanming/&quot;&gt;&lt;/a&gt;夏安明: &lt;a href=&quot;http://blog.csdn.net/xiaanming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/xiaanming/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;鸿洋-http-blog-csdn-net-lmj623565791&quot;&gt;&lt;a href=&quot;#鸿洋-http-blog-csdn-net-lmj623565791&quot; class=&quot;headerlink&quot; title=&quot;鸿洋: http://blog.csdn.net/lmj623565791&quot;&gt;&lt;/a&gt;鸿洋: &lt;a href=&quot;http://blog.csdn.net/lmj623565791&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lmj623565791&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;郭霖-http-blog-csdn-net-guolin-blog&quot;&gt;&lt;a href=&quot;#郭霖-http-blog-csdn-net-guolin-blog&quot; class=&quot;headerlink&quot; title=&quot;郭霖: http://blog.csdn.net/guolin_blog&quot;&gt;&lt;/a&gt;郭霖: &lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/guolin_blog&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;Mr-Simple-http-blog-csdn-net-bboyfeiyu&quot;&gt;&lt;a href=&quot;#Mr-Simple-http-blog-csdn-net-bboyfeiyu&quot; class=&quot;headerlink&quot; title=&quot;Mr.Simple: http://blog.csdn.net/bboyfeiyu&quot;&gt;&lt;/a&gt;Mr.Simple: &lt;a href=&quot;http://blog.csdn.net/bboyfeiyu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/bboyfeiyu&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;Android开发中文站：http-www-androidchina-net&quot;&gt;&lt;a href=&quot;#Android开发中文站：http-www-androidchina-net&quot; class=&quot;headerlink&quot; title=&quot;Android开发中文站：http://www.androidchina.net/&quot;&gt;&lt;/a&gt;Android开发中文站：&lt;a href=&quot;http://www.androidchina.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androidchina.net/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;Android-Tools-http-www-androiddevtools-cn&quot;&gt;&lt;a href=&quot;#Android-Tools-http-www-androiddevtools-cn&quot; class=&quot;headerlink&quot; title=&quot;Android Tools: http://www.androiddevtools.cn/&quot;&gt;&lt;/a&gt;Android Tools: &lt;a href=&quot;http://www.androiddevtools.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddevtools.cn/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;Drakeet的个人博客-https-drakeet-me&quot;&gt;&lt;a href=&quot;#Drakeet的个人博客-https-drakeet-me&quot; class=&quot;headerlink&quot; title=&quot;Drakeet的个人博客: https://drakeet.me/&quot;&gt;&lt;/a&gt;Drakeet的个人博客: &lt;a href=&quot;https://drakeet.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://drakeet.me/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;C-L-Wang：http-www-wangchenlong-org&quot;&gt;&lt;a href=&quot;#C-L-Wang：http-www-wangchenlong-org&quot; class=&quot;headerlink&quot; title=&quot;C.L. Wang：http://www.wangchenlong.org/&quot;&gt;&lt;/a&gt;C.L. Wang：&lt;a href=&quot;http://www.wangchenlong.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.wangchenlong.org/&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;赵凯强-http-blog-csdn-net-zhaokaiqiang1992&quot;&gt;&lt;a href=&quot;#赵凯强-http-blog-csdn-net-zhaokaiqiang1992&quot; class=&quot;headerlink&quot; title=&quot;赵凯强: http://blog.csdn.net/zhaokaiqiang1992&quot;&gt;&lt;/a&gt;赵凯强: &lt;a href=&quot;http://blog.csdn.net/zhaokaiqiang1992&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zhaokaiqiang1992&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;Sunzxyong：http-blog-csdn-net-u010687392-article-category-2776487&quot;&gt;&lt;a href=&quot;#Sunzxyong：http-blog-csdn-net-u010687392-article-category-2776487&quot; class=&quot;headerlink&quot; title=&quot;Sunzxyong：http://blog.csdn.net/u010687392/article/category/2776487&quot;&gt;&lt;/a&gt;Sunzxyong：&lt;a href=&quot;http://blog.csdn.net/u010687392/article/category/2776487&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/u010687392/article/category/2776487&lt;/a&gt;&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android学习网址：&quot;&gt;&lt;a href=&quot;#Android学习网址：&quot; class=&quot;headerlink&quot; title=&quot;Android学习网址：&quot;&gt;&lt;/a&gt;Android学习网址：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/04/hello-world/"/>
    <id>http://yoursite.com/2016/03/04/hello-world/</id>
    <published>2016-03-04T15:37:51.515Z</published>
    <updated>2016-03-13T10:25:47.402Z</updated>
    
    <content type="html">&lt;p&gt;新建了自己的博客，主要记录自己的一些工作和学习的总结。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;新建了自己的博客，主要记录自己的一些工作和学习的总结。&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
